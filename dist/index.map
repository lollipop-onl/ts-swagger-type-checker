{"version":3,"sources":["Schema.ts","Logger.ts","Checker.ts","App.ts","index.ts"],"names":[],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["/**\n * @file Json Schemaを扱うためのモジュール\n */\n\nexport default class Schema {\n  /**\n   * Swagger定義ファイルからスキーマを取得\n   */\n  public static getSwaggerSchema(config: any, path: string, method: string, type: string): any | void {\n    // * ヌルポに気をつけながら値を参照\n    if (!config) return;\n\n    const pathConfig = config.paths[path];\n\n    if (!pathConfig) return;\n\n    const methodConfig = pathConfig[method];\n\n    if (!methodConfig) return;\n\n    const { parameters, requestBody = {}, responses = {} } = methodConfig;\n\n    // * レスポンスのスキーマを取得\n    if (type === 'response') {\n      const res = responses['200'] || {};\n      const content = res.content || {};\n      const data = content['application/json'] || {};\n\n      return data.schema;\n    }\n\n    // * Getリクエストのクエリを取得\n    if (method === 'get') {\n      return parameters;\n    }\n\n    // * Get以外のBodyを取得\n    const content = requestBody.content || {};\n    const body = content['application/json'] || {};\n\n    return body.schema;\n  }\n}\n","/**\n * @file ロガー\n */\n\nexport default class Logger {\n  constructor(\n    private _log = {}\n  ) {}\n\n  /**\n   * ログを残す\n   */\n  public log(\n    obj: any,\n    path: string,\n    method: string,\n    type: string,\n    code: 'type' | 'missing' | 'unknown'\n  ): void {\n    if (!this._log[path]) this._log[path] = {};\n    if (!this._log[path][method]) this._log[path][method] = {};\n    if (!this._log[path][method][type]) this._log[path][method][type] = {};\n    if (!this._log[path][method][type][code]) this._log[path][method][type][code] = [];\n\n    this._log[path][method][type][code].push(obj);\n  }\n}\n","/**\n * @file スキーマ同士のチェックを行うモジュール\n */\n\nimport Schema from './Schema';\nimport Logger from './Logger';\nimport consola from 'consola';\nimport * as TJS from 'typescript-json-schema';\n\nexport default class Checker {\n  private logger;\n\n  constructor(\n    private target: string,\n    private config: any,\n    private baseDir: string\n  ) {\n    this.logger = new Logger();\n  }\n\n  public check(): void {\n    const tsSchema = this.getTSSchema();\n    const { definitions } = tsSchema;\n\n    Object.keys(definitions).forEach((key) => {\n      const definition = definitions[key];\n      const { properties, description } = definition;\n      const { path, method, type } = this.parseMetaComment(description);\n\n      // メタ情報のどれかが掛けていたら処理を終了\n      if (!path || !method || !type) return;\n\n      consola.info(`Checking... ${method}: ${path} - ${type}`);\n\n      const schema = Schema.getSwaggerSchema(this.config, path, method, type);\n\n      this.validateSchema(properties, tsSchema, schema, this.config);\n\n      consola.success(`Finish`);\n    });\n  }\n\n  /**\n   * TypeScriptの型定義を取得する\n   */\n  private getTSSchema(target = this.target): any | void {\n    const tsConfig = {\n      baseUrl: this.baseDir,\n      paths: {\n        '@/*': [\n          'src/*'\n        ]\n      },\n    };\n    const program = TJS.getProgramFromFiles([target], tsConfig);\n    const schema = TJS.generateSchema(program, '*');\n\n    if (!schema) return {};\n\n    return schema;\n  }\n\n  /**\n   * メタコメントをパースする\n   */\n  private parseMetaComment(comment = ''): any {\n    const { path, method, type } = comment.replace(/ /g, '').split('\\n').reduce((obj, item) => {\n      const [key, value] = item.split(':');\n\n      if (key && value) {\n        obj[key] = value;\n      }\n\n      return obj;\n    }, {} as any);\n\n    return { path, method, type };\n  }\n\n  /**\n   * $refのコンポーネントを取得する\n   */\n  getSchemaRef(obj, config): any {\n    const [ $ref ] = Object.keys(obj);\n\n    if ($ref !== '$ref') return obj;\n\n    const key = obj[$ref];\n\n    const def = key.replace(/^#\\//, '').split('/').reduce((obj, name) => {\n      return obj[name] || {};\n    }, config);\n\n    if (def.name && def.schema) {\n      return {\n        [def.name]: def.schema\n      };\n    }\n\n    return def;\n  }\n\n  /**\n   * スキーマを正規化する\n   */\n  optimizeSchema(schema, config): any {\n    const _schema = Array.isArray(schema) ? schema : [schema];\n\n    const parsedSchema = _schema.reduce((obj, self) => {\n      return {\n        ...obj,\n        ...this.getSchemaRef(self, config)\n      };\n    }, {});\n\n    const keys = Object.keys(parsedSchema);\n\n    // レスポンスの場合\n    if (keys.includes('properties')) {\n      return parsedSchema['properties'];\n    }\n\n    // Queryパラメータの場合\n    if (parsedSchema.in === 'query') {\n      return {\n        [parsedSchema['name']]: parsedSchema['schema']\n      };\n    }\n\n    return parsedSchema;\n  }\n\n  /**\n   * スキーマ同士を検証する\n   */\n  validateSchema(schema1 = {}, def1 = {}, schema2 = {}, def2 = {}): void {\n    const optimizedSchema1 = this.optimizeSchema(schema1, def1);\n    const optimizedSchema2 = this.optimizeSchema(schema2, def2);\n\n    const keys1 = Object.keys(optimizedSchema1);\n    const keys2 = Object.keys(optimizedSchema2);\n\n    // 不足しているプロパティのチェック\n    keys2.forEach((key) => {\n      if (!keys1.includes(key)) {\n        return consola.warn(`Missing property \"${key}\"`);\n      }\n    });\n\n    // 定義されていないプロパティのチェック\n    keys1.forEach((key) => {\n      if (!keys2.includes(key)) {\n        return consola.warn(`Unknown property \"${key}\"`);\n      }\n    });\n\n    const keys = keys1.filter((key) => keys2.includes(key));\n\n    keys.forEach((key) => {\n      const s1 = optimizedSchema1[key];\n      const s2 = optimizedSchema2[key];\n\n      // * 型が一致するかをチェック\n      if (s1.type !== s2.type) {\n        return consola.warn(`Different Types: \"${key}\" (${s1.type} vs ${s2.type})`);\n      }\n\n      // * 配列の場合\n      if (s1.type === 'array') {\n        this.validateSchema(s1.items, def1, s2.items, def2);\n      }\n    });\n  }\n}\n","/**\n * @file アプリケーションのベースモジュール\n */\nimport fs from 'fs';\nimport consola from 'consola';\nimport glob from 'glob';\nimport path from 'path';\nimport rmdir from 'rmdir';\nimport yaml from 'js-yaml';\nimport Checker from './Checker';\n\nexport default class App {\n  private config: any;\n\n  constructor(\n    private baseDir: string,\n    private pattern: string,\n    private configFile: string,\n    private tempDir: string\n  ) {}\n\n  /**\n   * チェックを実行する\n   */\n  public async exec(): Promise<void> {\n    this.config = this.loadSwaggerConfig();\n\n    if (!this.config) return consola.error(`${this.configFile}の定義ファイルを読み込めませんでした。`);\n\n    await this.copyTargetFiles();\n\n    // * チェック対象のファイルを取得\n    const targetFiles = glob.sync(path.resolve(this.tempDir, '*.ts'));\n\n    if (targetFiles.length === 0) {\n      return consola.warn('チェック対象のファイルがありません。');\n    }\n\n    targetFiles.forEach((target) => {\n      const checker = new Checker(target, this.config, this.baseDir);\n\n      checker.check();\n    });\n\n    // * 完了時に一時フォルダを削除\n    rmdir(this.tempDir);\n  }\n\n  /**\n   * Swaggerの定義ファイルを取得する\n   */\n  private loadSwaggerConfig(configFile = this.configFile): void {\n    try {\n      return yaml.safeLoad(fs.readFileSync(configFile, 'utf8'));\n    } catch (e) {\n      return;\n    }\n  }\n\n  /**\n   * チェック対象のTypeScriptファイルを手元にコピー\n   */\n  async copyTargetFiles(): Promise<void> {\n    const filePattern = path.resolve(path.resolve(this.baseDir, this.pattern));\n    const files = glob.sync(filePattern);\n    const promises = [];\n\n    // * 仮ファイル格納のディレクトリが存在しない場合は作成\n    if (!fs.existsSync(this.tempDir)) {\n      fs.mkdirSync(this.tempDir);\n    }\n\n    files.forEach((file) => {\n      promises.push(new Promise((resolve) => {\n        // コピー後のファイル名の拡張子を.tsにする\n        const copyedFileName = file.replace(/(.*)\\/(.+)\\.d\\.ts$/, '$2.ts');\n        const copyedPath = path.resolve(this.tempDir, copyedFileName);\n\n        fs.copyFile(file, copyedPath, resolve);\n      }));\n    });\n\n    await Promise.all(promises);\n  }\n}\n","import commander from 'commander';\nimport path from 'path';\nimport uniqid from 'uniqid';\nimport App from './App';\n\n// * コマンドライン引数を設定する\ncommander\n  .version('0.0.1')\n  .option('-b --base-dir [dir]', '対象プロジェクトのベースURL（tsconfig.jsonのあるディレクトリ）', './')\n  .option('-p --pattern [pattern]', '定義ファイルのパターン（--base-dirがベース）', '**/*.d.ts')\n  .option('-c --config-file [configFile]', 'Swagger定義ファイルのパス', './swagger.yml')\n  .parse(process.argv);\n\nconst { baseDir, pattern, configFile } = commander;\nconst tempDir = path.resolve(__dirname, `../.temp__${uniqid()}`);\n\nconst app = new App(baseDir, pattern, configFile, tempDir);\n\napp.exec();\n"]}